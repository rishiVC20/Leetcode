class Solution {
public:
    class Disjoint{
        public:
            vector<int>parent,size;
            Disjoint(int n){
                parent.resize(n+1);
                size.resize(n+1,1);
                for(int i=0; i<=n; i++){
                    parent[i]=i;
                }
            }

            int findParent(int nd){
                if(nd==parent[nd]){
                    return nd;
                }
                return parent[nd]=findParent(parent[nd]);
            }

            void findBySize(int u, int v){
                int par_u=findParent(u);
                int par_v=findParent(v);
                if(par_u==par_v){
                    return;
                }
                if(size[par_u]>size[par_v]){
                    parent[par_v]=par_u;
                    size[par_u]+=size[par_v];
                }
                else{
                    parent[par_u]=par_v;
                    size[par_v]+=size[par_u];
                }
            }
    };
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        Disjoint d(n);
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(graph[i][j]==1){
                    d.findBySize(i,j);
                }
            }
        }

        int m=initial.size();

        map<int,int>mp;
        for(int i=0; i<n; i++){
            int k=d.findParent(i);
            mp[k]++;
        }

        map<int,int>mm;
        for(int i=0; i<m; i++){
            int k=d.findParent(initial[i]);
            mm[k]++;
        }
        sort(initial.begin(),initial.end());
        int sz=INT_MIN;
        int ele=-1;
        for(int i=0; i<m; i++){
            int k=d.findParent(initial[i]);
            if(mm[k]==1 && mp[k]>sz){
                sz=mp[k];
                ele=initial[i];
            }
        }
        cout<<ele;
        if(ele==-1){
            return *min_element(initial.begin(), initial.end());
        }

        return ele;
    }
};